type CurrTask @model @auth(rules: [{allow: public}]) {
  id: ID!
  taskFeeling: String
  taskPassed: String
  taskProgress: String
  taskSteps: [String]
  currTaskName: String
  currTaskTaNo: [TaskNotes] @hasMany(indexName: "byCurrTask", fields: ["id"])
  supportID: ID! @index(name: "bySupport")
  currTaskSupp: Support @belongsTo(fields: ["supportID"])
  checkedStepsCount: Int
  timesEvaluated: Int
  traineeCurrTask: Trainee @belongsTo
  taskStepImage: [String]
  taskCoverImage: String
  traineeID: ID
}

type Notifications @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String
  timestamp: AWSTimestamp
  supportID: ID! @index(name: "bySupport")
  adminID: ID! @index(name: "byAdmin")
}

type Recipe @model @auth(rules: [{allow: public}]) {
  id: ID!
  recipeTitle: String
  recipeStep: [String]
  adminID: ID! @index(name: "byAdmin")
  recipeStepImage: [String]
  recipeCoverImage: String
}

type TraineeNotes @model @auth(rules: [{allow: public}]) {
  id: ID!
  noteTitle: String
  noteDesc: String
  supportID: ID @index(name: "bySupport")
  adminID: ID @index(name: "byAdmin")
  traineeNotesTrainee: Trainee @belongsTo
}

type TaskNotes @model @auth(rules: [{allow: public}]) {
  id: ID!
  taskTitle: String
  taskDesc: String
  supportID: ID @index(name: "bySupport")
  adminID: ID @index(name: "byAdmin")
  taskID: ID @index(name: "byTask")
  traineeID: ID @index(name: "byTrainee")
  currtaskID: ID @index(name: "byCurrTask")
}

type Task @model @auth(rules: [{allow: public}]) {
  id: ID!
  taskTitle: String
  taskStep: [String]
  adminID: ID! @index(name: "byAdmin")
  taskStepImage: [String]
  taskCoverImage: String
  taskTaskNotes: [TaskNotes] @hasMany(indexName: "byTask", fields: ["id"])
}

type Admin @model @auth(rules: [{allow: public}]) {
  id: ID!
  userName: String
  password: String
  adminTrainees: [Trainee] @hasMany(indexName: "byAdmin", fields: ["id"])
  adminTasks: [Task] @hasMany(indexName: "byAdmin", fields: ["id"])
  adminRecipes: [Recipe] @hasMany(indexName: "byAdmin", fields: ["id"])
  adminNotifs: [Notifications] @hasMany(indexName: "byAdmin", fields: ["id"])
  adminTaNo: [TaskNotes] @hasMany(indexName: "byAdmin", fields: ["id"])
  adminTrNo: [TraineeNotes] @hasMany(indexName: "byAdmin", fields: ["id"])
}

type Support @model @auth(rules: [{allow: public}]) {
  id: ID!
  sharedPassword: String
  suppTrainees: [Trainee] @hasMany(indexName: "bySupport", fields: ["id"])
  suppTrNo: [TraineeNotes] @hasMany(indexName: "bySupport", fields: ["id"])
  suppCT: [CurrTask] @hasMany(indexName: "bySupport", fields: ["id"])
  suppNotifs: [Notifications] @hasMany(indexName: "bySupport", fields: ["id"])
  suppTaNo: [TaskNotes] @hasMany(indexName: "bySupport", fields: ["id"])
}

type Trainee @model @auth(rules: [{allow: public}]) {
  id: ID!
  traineePhoto: String
  firstName: String
  lastName: String
  traineesCT: CurrTask @hasOne
  traineesTrNo: TraineeNotes @hasOne
  supportID: ID! @index(name: "bySupport")
  adminID: ID! @index(name: "byAdmin")
  TrTaskNotes: [TaskNotes] @hasMany(indexName: "byTrainee", fields: ["id"])
}
 